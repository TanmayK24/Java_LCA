
import java.util.HashSet;
import java.util.Set;

// Node Class 
class Node
{
	int key;
	Node[] children;

	public Node(int item)
	{
		this.key = item;
	}
	@Override
	public String toString() {
		return String.valueOf(key);
	}
}



//DAG
public class BinarySearchTree
{
	Node root;
	
	public BinarySearchTree(Node root){
		this.root = root;
	}
	
	public BinarySearchTree() {
		this.root = null;
	}
	
	

	@Override
	public String toString() {
		if (root == null) return null;
		return root.toString();
	}

	Node findLCA(Node n1,Node n2) {
		if(n1==null || n2==null) {
			return null;
		}
		Node[] result = new Node[1] ;
		Set<Node> nodesVisited = new HashSet<>();

		findPath(n1, n2, this.root, result, nodesVisited);

		if(n1.key==n2.key && nodesVisited.contains(n1)) {
			return n1;
		}
		if(!nodesVisited.contains(n1) || !nodesVisited.contains(n2)) {
			return null;
		}

		return result[0];
	}


	private int findPath(Node n1, Node n2, Node root, Node[] result, Set<Node> nodesVisited) {
		if(root==null) {
			return 0;
		}

		nodesVisited.add(root);

		int rootsFound = 0;
		//Check if n1 or n2 is root
		if(n1.key==root.key || n2.key == root.key) {
			rootsFound = 1;
		}else {
			rootsFound = 0;
		}

		if(root.children != null) {
			for(int i=0; i<root.children.length ; i++) {
				rootsFound += findPath(n1, n2, root.children[i], result, nodesVisited);
			}
		}

		if(result[0]==null && rootsFound>1) {
			result[0] = root;
		}
		return rootsFound;
	}


}

